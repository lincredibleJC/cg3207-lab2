


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------------
    2 00000000         ;-- (c) Rajesh Panicker
    3 00000000         ;-- License terms :
    4 00000000         ;-- You are free to use this code as long as you
    5 00000000         ;--  (i) DO NOT post it on any public repository;
    6 00000000         ;--  (ii) use it only for educational purposes;
    7 00000000         ;--  (iii) accept the responsibility to ensure that your
                        implementation does not violate any intellectual proper
                       ty of ARM Holdings or other entities.
    8 00000000         ;--  (iv) accept that the program is provided "as is" wi
                       thout warranty of any kind or assurance regarding its su
                       itability for any particular purpose;
    9 00000000         ;--  (v) send an email to rajesh.panicker@ieee.org brief
                       ly mentioning its use (except when used for the course C
                       G3207 at the National University of Singapore);
   10 00000000         ;--  (vi) retain this notice in this file or any files d
                       erived from this.
   11 00000000         ;-------------------------------------------------------
                       ---------------------------
   12 00000000         
   13 00000000                 AREA             MYCODE, CODE, READONLY, ALIGN=9
   14 00000000                 ENTRY
   15 00000000         
   16 00000000         ; ------- <code memory (ROM mapped to Instruction Memory
                       ) begins>
   17 00000000         ; Total number of instructions should not exceed 127 (12
                       6 excluding the last line 'halt B halt').
   18 00000000         
   19 00000000         ; This sample program prints "Welcome to CG3207" in resp
                       onse to "A\r" (A+Enter) received from Console. There sho
                       uld be sufficient time gap between the press of 'A' and 
                       '\r'
   20 00000000 E51F6008        LDR              R6, ZERO    ; R6 stores the con
                                                            stant 0, which we n
                                                            eed frequently as w
                                                            e do not have MOV i
                                                            mplemented. Hence, 
                                                            something like MOV 
                                                            R1, #4 is accomplis
                                                            hed by ADD R1, R6, 
                                                            #4
   21 00000004 E51F7008        LDR              R7, LSB_MASK ; A mask for extra
                                                            cting out the LSB t
                                                            o check for '\0'
   22 00000008 E51F8008        LDR              R8, CONSOLE_OUT_ready ; UART re
                                                            ady for output flag
                                                            
   23 0000000C E51F9008        LDR              R9, CONSOLE_IN_valid ; UART new
                                                             data flag
   24 00000010 E51FA008        LDR              R10, CONSOLE ; UART
   25 00000014 E51FB008        LDR              R11, SEVENSEG
   26 00000018 E51FC008        LDR              R12, LEDS
   27 0000001C         
   28 0000001C E49A1001        LDR              R1, [R10], #0x01 ; Basic: Load 
                                                            with offset
   29 00000020 E48B1020        STR              R1, [R11], #0x20 ; Basic: Store
                                                             with offset
   30 00000024         WAIT_A



ARM Macro Assembler    Page 2 


   31 00000024 E5993000        LDR              R3, [R9]    ; read the new char
                                                            acter flag
   32 00000028 E3530000        CMP              R3, #0      ; check if there is
                                                             a new character
   33 0000002C 0AFFFFFC        BEQ              WAIT_A      ; go back and wait 
                                                            if there is no new 
                                                            character
   34 00000030 E59A3000        LDR              R3, [R10]   ; read UART (first 
                                                            character. 'A' - 0x
                                                            41 expected)
   35 00000034         
   36 00000034 E0012009        AND              R2, R1, R9  ; Basic: DP with re
                                                            gister 
   37 00000038 E3812003        ORR              R2, R1, #0x03 ; Basic: DP with 
                                                            offset
   38 0000003C E041200A        SUB              R2, R1, R10 ; Basic: DP with re
                                                            gister
   39 00000040         
   40 00000040         ECHO_A
   41 00000040 E5984000        LDR              R4, [R8]
   42 00000044 E3540000        CMP              R4, #0
   43 00000048 0AFFFFFC        BEQ              ECHO_A
   44 0000004C E58A3000        STR              R3, [R10]   ; echo received cha
                                                            racter to the conso
                                                            le
   45 00000050 E58B3000        STR              R3, [R11]   ; show received cha
                                                            racter (ASCII) on t
                                                            he 7-Seg display
   46 00000054 E3530041        CMP              R3, #'A'
   47 00000058 1AFFFFF1        BNE              WAIT_A      ; not 'A'. Continue
                                                             waiting
   48 0000005C         
   49 0000005C E1720001        CMN              R2, R1      ; Improvement: CMN
   50 00000060 E4191001        LDR              R1, [R9], #-1 ; Improvement: Lo
                                                            ad with negative of
                                                            fset
   51 00000064 E40B6014        STR              R6, [R11], #-0x14 ; Improvement
                                                            : Store with negati
                                                            ve offset
   52 00000068         
   53 00000068         WAIT_CR                              ; 'A' received. Nee
                                                            d to wait for '\r' 
                                                            (Carriage Return - 
                                                            CR).
   54 00000068 E5993000        LDR              R3, [R9]    ; read the new char
                                                            acter flag
   55 0000006C E3530000        CMP              R3, #0      ; check if there is
                                                             a new character
   56 00000070 0AFFFFFC        BEQ              WAIT_CR     ; go back and wait 
                                                            if there is no new 
                                                            character
   57 00000074 E59A3000        LDR              R3, [R10]   ; read UART (second
                                                             character. '\r' ex
                                                            pected)
   58 00000078         
   59 00000078 E08120E9        ADD              R2, R1, R9, ROR #0x01 ; Improve
                                                            ment: DP with immed
                                                            iate-shifted regist
                                                            er



ARM Macro Assembler    Page 3 


   60 0000007C E1842145        ORR              R2, R4, R5, ASR #0x02 ; Improve
                                                            ment: DP with immed
                                                            iate-shifted regist
                                                            er
   61 00000080 E0032205        AND              R2, R3, R5, LSL #0x04 ; Improve
                                                            ment: DP with immed
                                                            iate-shifted regist
                                                            er
   62 00000084         
   63 00000084         ECHO_CR
   64 00000084 E5984000        LDR              R4, [R8]
   65 00000088 E3540000        CMP              R4, #0
   66 0000008C 0AFFFFFC        BEQ              ECHO_CR
   67 00000090 E58A3000        STR              R3, [R10]   ; echo received cha
                                                            racter to the conso
                                                            le
   68 00000094 E58B3000        STR              R3, [R11]   ; show received cha
                                                            racter (ASCII) on t
                                                            he 7-Seg display
   69 00000098 E3530041        CMP              R3, #'A'    ; perhaps the user 
                                                            is trying again bef
                                                            ore completing the 
                                                            pervious attempt, o
                                                            r 'A' was repeated.
                                                             Just a '\r' needed
                                                             as we already got 
                                                            an 'A'
   70 0000009C 0AFFFFF1        BEQ              WAIT_CR     ; wait for '\r' 
   71 000000A0 E353000D        CMP              R3, #'\r'   ; Check if the seco
                                                            nd character is '\r
                                                            '
   72 000000A4 E51F0008        LDR              R0, stringptr ; R0 stores the v
                                                            alue to be displaye
                                                            d. This is the argu
                                                            ment passed to PRIN
                                                            T_S
   73 000000A8 E28FE000        ADD              R14, R15, #0 ; Storing the retu
                                                            rn value manually s
                                                            ince we do not have
                                                             BL
   74 000000AC 0A000000        BEQ              PRINT_S     ; "A\r" received. C
                                                            all PRINT_S subrout
                                                            ine
   75 000000B0 EAFFFFDB        B                WAIT_A      ; not the correct p
                                                            attern. try again.
   76 000000B4         
   77 000000B4         ; P the null-terminated string at a location pointed to 
                       be R0 onto the console.
   78 000000B4         ; It is a good idea to 'push' the registers used by this
                        function to the 'stack'.
   79 000000B4         ; A stack can be simulated by using R13 as a stack point
                       er. Loading and storing should be accompanied by manuall
                       y decrementing/incrementing R13. Only one value can be '
                       push'ed or 'pop'ed at a time.
   80 000000B4         PRINT_S
   81 000000B4 E5901000        LDR              R1, [R0]    ; load the word (4 
                                                            characters) to be d
                                                            isplayed
   82 000000B8         ;STR R1, [R11] ; write to seven segment display



ARM Macro Assembler    Page 4 


   83 000000B8 E2863004        ADD              R3, R6, #4  ; byte counter
   84 000000BC         NEXTCHAR
   85 000000BC E5984000        LDR              R4, [R8]    ; check if CONSOLE 
                                                            is ready to send a 
                                                            new character
   86 000000C0 E3540000        CMP              R4, #0
   87 000000C4 0AFFFFFC        BEQ              NEXTCHAR    ; not ready, contin
                                                            ue waiting
   88 000000C8 E0112007        ANDS             R2, R1, R7  ; apply LSB_MASK
   89 000000CC 0A000005        BEQ              DONE_PRINT_S ; null terminator 
                                                            ('\0') detected
   90 000000D0 E58A1000        STR              R1, [R10]   ; write to UART the
                                                             Byte[4-R3] of the 
                                                            original word (comp
                                                            osed of 4 character
                                                            s) in [7:0] of the 
                                                            word to be written 
                                                            (remember, we can o
                                                            nly write words, an
                                                            d LEDs/UART display
                                                            s only [7:0] of the
                                                             written word)
   91 000000D4         ;STR R1, [R12] ; write to LEDS
   92 000000D4 E0861421        ADD              R1, R6, R1, LSR #8 ; shift so t
                                                            hat the next charac
                                                            ter comes into LSB
   93 000000D8 E2533001        SUBS             R3, #1
   94 000000DC 1AFFFFF6        BNE              NEXTCHAR    ; check and print t
                                                            he next character
   95 000000E0 E2800004        ADD              R0, #4      ; point to next wor
                                                            d (4 characters)
   96 000000E4 EAFFFFF2        B                PRINT_S
   97 000000E8         DONE_PRINT_S
   98 000000E8 E28EF000        ADD              R15, R14, #0 ; return from the 
                                                            subroutine
   99 000000EC         
  100 000000EC         halt
  101 000000EC EAFFFFFE        B                halt        ; infinite loop to 
                                                            halt computation. /
                                                            / A program should 
                                                            not "terminate" wit
                                                            hout an operating s
                                                            ystem to return con
                                                            trol to
  102 000000F0         ; keep halt B halt as the last line of your code.
  103 000000F0         ; ------- <\code memory (ROM mapped to Instruction Memor
                       y) ends>
  104 000000F0         
  105 000000F0         
  106 000000F0                 AREA             CONSTANTS, DATA, READONLY, ALIG
N=9
  107 00000000         ; ------- <constant memory (ROM mapped to Data Memory) b
                       egins>
  108 00000000         ; All constants should be declared in this section. This
                        section is read only (Only LDR, no STR).
  109 00000000         ; Total number of constants should not exceed 128 (124 e
                       xcluding the 4 used for peripheral pointers).
  110 00000000         ; If a variable is accessed multiple times, it is better
                        to store the address in a register and use it rather th



ARM Macro Assembler    Page 5 


                       an load it repeatedly.
  111 00000000         
  112 00000000         ;Peripheral pointers
  113 00000000         LEDS
  114 00000000 00000C00        DCD              0x00000C00  ; Address of LEDs. 
                                                            //volatile unsigned
                                                             int * const LEDS =
                                                             (unsigned int*)0x0
                                                            0000C00;  
  115 00000004         DIPS
  116 00000004 00000C04        DCD              0x00000C04  ; Address of DIP sw
                                                            itches. //volatile 
                                                            unsigned int * cons
                                                            t DIPS = (unsigned 
                                                            int*)0x00000C04;
  117 00000008         PBS
  118 00000008 00000C08        DCD              0x00000C08  ; Address of Push B
                                                            uttons. Used only i
                                                            n Lab 2
  119 0000000C         CONSOLE
  120 0000000C 00000C0C        DCD              0x00000C0C  ; Address of UART. 
                                                            Used only in Lab 2 
                                                            and later
  121 00000010         CONSOLE_IN_valid
  122 00000010 00000C10        DCD              0x00000C10  ; Address of UART. 
                                                            Used only in Lab 2 
                                                            and later
  123 00000014         CONSOLE_OUT_ready
  124 00000014 00000C14        DCD              0x00000C14  ; Address of UART. 
                                                            Used only in Lab 2 
                                                            and later
  125 00000018         SEVENSEG
  126 00000018 00000C18        DCD              0x00000C18  ; Address of 7-Segm
                                                            ent LEDs. Used only
                                                             in Lab 2 and later
                                                            
  127 0000001C         
  128 0000001C         ; Rest of the constants should be declared below.
  129 0000001C         ZERO
  130 0000001C 00000000        DCD              0x00000000  ; constant 0
  131 00000020         LSB_MASK
  132 00000020 000000FF        DCD              0x000000FF  ; constant 0xFF
  133 00000024         DELAY_VAL
  134 00000024 00000002        DCD              0x00000002  ; delay time.
  135 00000028         variable1_addr
  136 00000028 00000000        DCD              variable1   ; address of variab
                                                            le1. Required since
                                                             we are avoiding ps
                                                            eudo-instructions /
                                                            / unsigned int * co
                                                            nst variable1_addr 
                                                            = &variable1;
  137 0000002C         constant1
  138 0000002C ABCD1234        DCD              0xABCD1234  ; // const unsigned
                                                             int constant1 = 0x
                                                            ABCD1234;
  139 00000030         string1
  140 00000030 0D 0A 57 
              65 6C 63 



ARM Macro Assembler    Page 6 


              6F 6D 65 
              20 74 6F 
              20 43 47 
              33 32 30 
              37 2E 2E 
              0D 0A 00         DCB              "\r\nWelcome to CG3207..\r\n",0
 
                                                            ; // unsigned char 
                                                            string1[] = "Hello 
                                                            World!"; // assembl
                                                            er will issue a war
                                                            ning if the string 
                                                            size is not a multi
                                                            ple of 4, but the w
                                                            arning is safe to i
                                                            gnore
  141 00000048         stringptr
  142 00000048 00000000        DCD              string1     ;
  143 0000004C         
  144 0000004C         ; ------- <constant memory (ROM mapped to Data Memory) e
                       nds> 
  145 0000004C         
  146 0000004C         
  147 0000004C                 AREA             VARIABLES, DATA, READWRITE, ALI
GN=9
  148 00000000         ; ------- <variable memory (RAM mapped to Data Memory) b
                       egins>
  149 00000000         ; All variables should be declared in this section. This
                        section is read-write.
  150 00000000         ; Total number of variables should not exceed 128. 
  151 00000000         ; No initialization possible in this region. In other wo
                       rds, you should write to a location before you can read 
                       from it (i.e., write to a location using STR before read
                       ing using LDR).
  152 00000000         
  153 00000000         variable1
  154 00000000 00000000        DCD              0x00000000  ;  // unsigned int 
                                                            variable1;
  155 00000004         ; ------- <variable memory (RAM mapped to Data Memory) e
                       nds> 
  156 00000004         
  157 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=HelloWorld.d -oHelloWorl
d.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include --predefine="__EVAL SETA
 1" --list=HelloWorld.lst HelloWorld.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DONE_PRINT_S 000000E8

Symbol: DONE_PRINT_S
   Definitions
      At line 97 in file HelloWorld.s
   Uses
      At line 89 in file HelloWorld.s
Comment: DONE_PRINT_S used once
ECHO_A 00000040

Symbol: ECHO_A
   Definitions
      At line 40 in file HelloWorld.s
   Uses
      At line 43 in file HelloWorld.s
Comment: ECHO_A used once
ECHO_CR 00000084

Symbol: ECHO_CR
   Definitions
      At line 63 in file HelloWorld.s
   Uses
      At line 66 in file HelloWorld.s
Comment: ECHO_CR used once
MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 13 in file HelloWorld.s
   Uses
      None
Comment: MYCODE unused
NEXTCHAR 000000BC

Symbol: NEXTCHAR
   Definitions
      At line 84 in file HelloWorld.s
   Uses
      At line 87 in file HelloWorld.s
      At line 94 in file HelloWorld.s

PRINT_S 000000B4

Symbol: PRINT_S
   Definitions
      At line 80 in file HelloWorld.s
   Uses
      At line 74 in file HelloWorld.s
      At line 96 in file HelloWorld.s

WAIT_A 00000024

Symbol: WAIT_A
   Definitions
      At line 30 in file HelloWorld.s
   Uses
      At line 33 in file HelloWorld.s
      At line 47 in file HelloWorld.s
      At line 75 in file HelloWorld.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


WAIT_CR 00000068

Symbol: WAIT_CR
   Definitions
      At line 53 in file HelloWorld.s
   Uses
      At line 56 in file HelloWorld.s
      At line 70 in file HelloWorld.s

halt 000000EC

Symbol: halt
   Definitions
      At line 100 in file HelloWorld.s
   Uses
      At line 101 in file HelloWorld.s
Comment: halt used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CONSOLE 0000000C

Symbol: CONSOLE
   Definitions
      At line 119 in file HelloWorld.s
   Uses
      At line 24 in file HelloWorld.s
Comment: CONSOLE used once
CONSOLE_IN_valid 00000010

Symbol: CONSOLE_IN_valid
   Definitions
      At line 121 in file HelloWorld.s
   Uses
      At line 23 in file HelloWorld.s
Comment: CONSOLE_IN_valid used once
CONSOLE_OUT_ready 00000014

Symbol: CONSOLE_OUT_ready
   Definitions
      At line 123 in file HelloWorld.s
   Uses
      At line 22 in file HelloWorld.s
Comment: CONSOLE_OUT_ready used once
CONSTANTS 00000000

Symbol: CONSTANTS
   Definitions
      At line 106 in file HelloWorld.s
   Uses
      None
Comment: CONSTANTS unused
DELAY_VAL 00000024

Symbol: DELAY_VAL
   Definitions
      At line 133 in file HelloWorld.s
   Uses
      None
Comment: DELAY_VAL unused
DIPS 00000004

Symbol: DIPS
   Definitions
      At line 115 in file HelloWorld.s
   Uses
      None
Comment: DIPS unused
LEDS 00000000

Symbol: LEDS
   Definitions
      At line 113 in file HelloWorld.s
   Uses
      At line 26 in file HelloWorld.s
Comment: LEDS used once
LSB_MASK 00000020

Symbol: LSB_MASK



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 131 in file HelloWorld.s
   Uses
      At line 21 in file HelloWorld.s
Comment: LSB_MASK used once
PBS 00000008

Symbol: PBS
   Definitions
      At line 117 in file HelloWorld.s
   Uses
      None
Comment: PBS unused
SEVENSEG 00000018

Symbol: SEVENSEG
   Definitions
      At line 125 in file HelloWorld.s
   Uses
      At line 25 in file HelloWorld.s
Comment: SEVENSEG used once
ZERO 0000001C

Symbol: ZERO
   Definitions
      At line 129 in file HelloWorld.s
   Uses
      At line 20 in file HelloWorld.s
Comment: ZERO used once
constant1 0000002C

Symbol: constant1
   Definitions
      At line 137 in file HelloWorld.s
   Uses
      None
Comment: constant1 unused
string1 00000030

Symbol: string1
   Definitions
      At line 139 in file HelloWorld.s
   Uses
      At line 142 in file HelloWorld.s
Comment: string1 used once
stringptr 00000048

Symbol: stringptr
   Definitions
      At line 141 in file HelloWorld.s
   Uses
      At line 72 in file HelloWorld.s
Comment: stringptr used once
variable1_addr 00000028

Symbol: variable1_addr
   Definitions
      At line 135 in file HelloWorld.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: variable1_addr unused
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

VARIABLES 00000000

Symbol: VARIABLES
   Definitions
      At line 147 in file HelloWorld.s
   Uses
      None
Comment: VARIABLES unused
variable1 00000000

Symbol: variable1
   Definitions
      At line 153 in file HelloWorld.s
   Uses
      At line 136 in file HelloWorld.s
Comment: variable1 used once
2 symbols
357 symbols in table
