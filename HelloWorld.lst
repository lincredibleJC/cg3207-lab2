


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ---------------------------
    2 00000000         ;-- (c) Rajesh Panicker
    3 00000000         ;-- License terms :
    4 00000000         ;-- You are free to use this code as long as you
    5 00000000         ;--  (i) DO NOT post it on any public repository;
    6 00000000         ;--  (ii) use it only for educational purposes;
    7 00000000         ;--  (iii) accept the responsibility to ensure that your
                        implementation does not violate any intellectual proper
                       ty of ARM Holdings or other entities.
    8 00000000         ;--  (iv) accept that the program is provided "as is" wi
                       thout warranty of any kind or assurance regarding its su
                       itability for any particular purpose;
    9 00000000         ;--  (v) send an email to rajesh.panicker@ieee.org brief
                       ly mentioning its use (except when used for the course C
                       G3207 at the National University of Singapore);
   10 00000000         ;--  (vi) retain this notice in this file or any files d
                       erived from this.
   11 00000000         ;-------------------------------------------------------
                       ---------------------------
   12 00000000         
   13 00000000                 AREA             MYCODE, CODE, READONLY, ALIGN=9
   14 00000000                 ENTRY
   15 00000000         
   16 00000000         ; ------- <code memory (ROM mapped to Instruction Memory
                       ) begins>
   17 00000000         ; Total number of instructions should not exceed 127 (12
                       6 excluding the last line 'halt B halt').
   18 00000000         
   19 00000000         ; This sample program prints "Welcome to CG3207" in resp
                       onse to "A\r" (A+Enter) received from Console. There sho
                       uld be sufficient time gap between the press of 'A' and 
                       '\r'
   20 00000000 E51F6008        LDR              R6, ZERO    ; R6 stores the con
                                                            stant 0, which we n
                                                            eed frequently as w
                                                            e do not have MOV i
                                                            mplemented. Hence, 
                                                            something like MOV 
                                                            R1, #4 is accomplis
                                                            hed by ADD R1, R6, 
                                                            #4
   21 00000004 E51F7008        LDR              R7, LSB_MASK ; A mask for extra
                                                            cting out the LSB t
                                                            o check for '\0'
   22 00000008 E51F8008        LDR              R8, CONSOLE_OUT_ready ; UART re
                                                            ady for output flag
                                                            
   23 0000000C E51F9008        LDR              R9, CONSOLE_IN_valid ; UART new
                                                             data flag
   24 00000010 E51FA008        LDR              R10, CONSOLE ; UART
   25 00000014 E51FB008        LDR              R11, SEVENSEG
   26 00000018 E51FC008        LDR              R12, LEDS
   27 0000001C         
   28 0000001C         WAIT_A
   29 0000001C E59A3004        LDR              R3, [R10, #4] ; read the new ch
                                                            aracter flag | Basi
                                                            c: Load with positi
                                                            ve immediate



ARM Macro Assembler    Page 2 


   30 00000020 E0832006        ADD              R2, R3, R6  ; R2 = R3 + 0 | Bas
                                                            ic: DP with registe
                                                            r 
   31 00000024 E3520000        CMP              R2, #0      ; check if there is
                                                             a new character
   32 00000028 0AFFFFFB        BEQ              WAIT_A      ; go back and wait 
                                                            if there is no new 
                                                            character
   33 0000002C E59A3000        LDR              R3, [R10]   ; read UART (first 
                                                            character. 'A' - 0x
                                                            41 expected)
   34 00000030         
   35 00000030         ECHO_A
   36 00000030 E5984000        LDR              R4, [R8]
   37 00000034 E20420FF        AND              R2, R4, #0xFF ; R2 = R4 | Basic
                                                            : DP with immediate
                                                            
   38 00000038 E3520000        CMP              R2, #0
   39 0000003C 0AFFFFFB        BEQ              ECHO_A
   40 00000040 E58C300C        STR              R3, [R12, #0x0C] ; echo receive
                                                            d character to the 
                                                            console | Basic: St
                                                            ore with positive i
                                                            mmediate
   41 00000044 E58B3000        STR              R3, [R11]   ; show received cha
                                                            racter (ASCII) on t
                                                            he 7-Seg display
   42 00000048 E3530041        CMP              R3, #'A'    ; Improvement: CMN
   43 0000004C 1AFFFFF2        BNE              WAIT_A      ; not 'A'. Continue
                                                             waiting
   44 00000050         
   45 00000050         WAIT_CR                              ; 'A' received. Nee
                                                            d to wait for '\r' 
                                                            (Carriage Return - 
                                                            CR).
   46 00000050 E5183004        LDR              R3, [R8, #-4] ; read the new ch
                                                            aracter flag | Impr
                                                            ovement: Load with 
                                                            negative offset
   47 00000054 E3530000        CMP              R3, #0      ; check if there is
                                                             a new character
   48 00000058 0AFFFFFC        BEQ              WAIT_CR     ; go back and wait 
                                                            if there is no new 
                                                            character
   49 0000005C E59A3000        LDR              R3, [R10]   ; read UART (second
                                                             character. '\r' ex
                                                            pected)
   50 00000060         
   51 00000060         ECHO_CR
   52 00000060 E5984000        LDR              R4, [R8]
   53 00000064 E18420E6        ORR              R2, R4, R6, ROR #0x01 ; R2 = R4
                                                             | Improvement: DP 
                                                            with immediate-shif
                                                            ted register
   54 00000068 E3520000        CMP              R2, #0
   55 0000006C 0AFFFFFB        BEQ              ECHO_CR
   56 00000070 E5093004        STR              R3, [R9, #-4] ; echo received c
                                                            haracter to the con
                                                            sole | Improvement:



ARM Macro Assembler    Page 3 


                                                             Store with negativ
                                                            e offset
   57 00000074 E58B3000        STR              R3, [R11]   ; show received cha
                                                            racter (ASCII) on t
                                                            he 7-Seg display
   58 00000078 E0432206        SUB              R2, R3, R6, LSL #0x04 ; Improve
                                                            ment: DP with immed
                                                            iate-shifted regist
                                                            er
   59 0000007C E3520041        CMP              R2, #'A'    ; perhaps the user 
                                                            is trying again bef
                                                            ore completing the 
                                                            pervious attempt, o
                                                            r 'A' was repeated.
                                                             Just a '\r' needed
                                                             as we already got 
                                                            an 'A'
   60 00000080 0AFFFFF2        BEQ              WAIT_CR     ; wait for '\r' 
   61 00000084 E353000D        CMP              R3, #'\r'   ; Check if the seco
                                                            nd character is '\r
                                                            '
   62 00000088 E51F0008        LDR              R0, stringptr ; R0 stores the v
                                                            alue to be displaye
                                                            d. This is the argu
                                                            ment passed to PRIN
                                                            T_S
   63 0000008C E28FE000        ADD              R14, R15, #0 ; Storing the retu
                                                            rn value manually s
                                                            ince we do not have
                                                             BL
   64 00000090 0A000000        BEQ              PRINT_S     ; "A\r" received. C
                                                            all PRINT_S subrout
                                                            ine
   65 00000094 EAFFFFE0        B                WAIT_A      ; not the correct p
                                                            attern. try again.
   66 00000098         
   67 00000098         ; P the null-terminated string at a location pointed to 
                       be R0 onto the console.
   68 00000098         ; It is a good idea to 'push' the registers used by this
                        function to the 'stack'.
   69 00000098         ; A stack can be simulated by using R13 as a stack point
                       er. Loading and storing should be accompanied by manuall
                       y decrementing/incrementing R13. Only one value can be '
                       push'ed or 'pop'ed at a time.
   70 00000098         PRINT_S
   71 00000098 E5901000        LDR              R1, [R0]    ; load the word (4 
                                                            characters) to be d
                                                            isplayed
   72 0000009C         ;STR R1, [R11] ; write to seven segment display
   73 0000009C E2863004        ADD              R3, R6, #4  ; byte counter
   74 000000A0         NEXTCHAR
   75 000000A0 E5984000        LDR              R4, [R8]    ; check if CONSOLE 
                                                            is ready to send a 
                                                            new character
   76 000000A4 E0842146        ADD              R2, R4, R6, ASR #0x02 ; Improve
                                                            ment: DP with immed
                                                            iate-shifted regist
                                                            er
   77 000000A8 E3520000        CMP              R2, #0



ARM Macro Assembler    Page 4 


   78 000000AC 0AFFFFFB        BEQ              NEXTCHAR    ; not ready, contin
                                                            ue waiting
   79 000000B0 E0112007        ANDS             R2, R1, R7  ; apply LSB_MASK
   80 000000B4 0A000005        BEQ              DONE_PRINT_S ; null terminator 
                                                            ('\0') detected
   81 000000B8 E58A1000        STR              R1, [R10]   ; write to UART the
                                                             Byte[4-R3] of the 
                                                            original word (comp
                                                            osed of 4 character
                                                            s) in [7:0] of the 
                                                            word to be written 
                                                            (remember, we can o
                                                            nly write words, an
                                                            d LEDs/UART display
                                                            s only [7:0] of the
                                                             written word)
   82 000000BC         ;STR R1, [R12] ; write to LEDS
   83 000000BC E0861421        ADD              R1, R6, R1, LSR #8 ; shift so t
                                                            hat the next charac
                                                            ter comes into LSB
   84 000000C0 E2533001        SUBS             R3, #1
   85 000000C4 1AFFFFF5        BNE              NEXTCHAR    ; check and print t
                                                            he next character
   86 000000C8 E2800004        ADD              R0, #4      ; point to next wor
                                                            d (4 characters)
   87 000000CC EAFFFFF1        B                PRINT_S
   88 000000D0         DONE_PRINT_S
   89 000000D0 E28EF000        ADD              R15, R14, #0 ; return from the 
                                                            subroutine
   90 000000D4         
   91 000000D4         halt
   92 000000D4 EAFFFFFE        B                halt        ; infinite loop to 
                                                            halt computation. /
                                                            / A program should 
                                                            not "terminate" wit
                                                            hout an operating s
                                                            ystem to return con
                                                            trol to
   93 000000D8         ; keep halt B halt as the last line of your code.
   94 000000D8         ; ------- <\code memory (ROM mapped to Instruction Memor
                       y) ends>
   95 000000D8         
   96 000000D8         
   97 000000D8                 AREA             CONSTANTS, DATA, READONLY, ALIG
N=9
   98 00000000         ; ------- <constant memory (ROM mapped to Data Memory) b
                       egins>
   99 00000000         ; All constants should be declared in this section. This
                        section is read only (Only LDR, no STR).
  100 00000000         ; Total number of constants should not exceed 128 (124 e
                       xcluding the 4 used for peripheral pointers).
  101 00000000         ; If a variable is accessed multiple times, it is better
                        to store the address in a register and use it rather th
                       an load it repeatedly.
  102 00000000         
  103 00000000         ;Peripheral pointers
  104 00000000         LEDS
  105 00000000 00000C00        DCD              0x00000C00  ; Address of LEDs. 
                                                            //volatile unsigned



ARM Macro Assembler    Page 5 


                                                             int * const LEDS =
                                                             (unsigned int*)0x0
                                                            0000C00;  
  106 00000004         DIPS
  107 00000004 00000C04        DCD              0x00000C04  ; Address of DIP sw
                                                            itches. //volatile 
                                                            unsigned int * cons
                                                            t DIPS = (unsigned 
                                                            int*)0x00000C04;
  108 00000008         PBS
  109 00000008 00000C08        DCD              0x00000C08  ; Address of Push B
                                                            uttons. Used only i
                                                            n Lab 2
  110 0000000C         CONSOLE
  111 0000000C 00000C0C        DCD              0x00000C0C  ; Address of UART. 
                                                            Used only in Lab 2 
                                                            and later
  112 00000010         CONSOLE_IN_valid
  113 00000010 00000C10        DCD              0x00000C10  ; Address of UART. 
                                                            Used only in Lab 2 
                                                            and later
  114 00000014         CONSOLE_OUT_ready
  115 00000014 00000C14        DCD              0x00000C14  ; Address of UART. 
                                                            Used only in Lab 2 
                                                            and later
  116 00000018         SEVENSEG
  117 00000018 00000C18        DCD              0x00000C18  ; Address of 7-Segm
                                                            ent LEDs. Used only
                                                             in Lab 2 and later
                                                            
  118 0000001C         
  119 0000001C         ; Rest of the constants should be declared below.
  120 0000001C         ZERO
  121 0000001C 00000000        DCD              0x00000000  ; constant 0
  122 00000020         LSB_MASK
  123 00000020 000000FF        DCD              0x000000FF  ; constant 0xFF
  124 00000024         DELAY_VAL
  125 00000024 00000002        DCD              0x00000002  ; delay time.
  126 00000028         variable1_addr
  127 00000028 00000000        DCD              variable1   ; address of variab
                                                            le1. Required since
                                                             we are avoiding ps
                                                            eudo-instructions /
                                                            / unsigned int * co
                                                            nst variable1_addr 
                                                            = &variable1;
  128 0000002C         constant1
  129 0000002C ABCD1234        DCD              0xABCD1234  ; // const unsigned
                                                             int constant1 = 0x
                                                            ABCD1234;
  130 00000030         string1
  131 00000030 0D 0A 57 
              65 6C 63 
              6F 6D 65 
              20 74 6F 
              20 43 47 
              33 32 30 
              37 2E 2E 
              0D 0A 00         DCB              "\r\nWelcome to CG3207..\r\n",0



ARM Macro Assembler    Page 6 


 
                                                            ; // unsigned char 
                                                            string1[] = "Hello 
                                                            World!"; // assembl
                                                            er will issue a war
                                                            ning if the string 
                                                            size is not a multi
                                                            ple of 4, but the w
                                                            arning is safe to i
                                                            gnore
  132 00000048         stringptr
  133 00000048 00000000        DCD              string1     ;
  134 0000004C         
  135 0000004C         ; ------- <constant memory (ROM mapped to Data Memory) e
                       nds> 
  136 0000004C         
  137 0000004C         
  138 0000004C                 AREA             VARIABLES, DATA, READWRITE, ALI
GN=9
  139 00000000         ; ------- <variable memory (RAM mapped to Data Memory) b
                       egins>
  140 00000000         ; All variables should be declared in this section. This
                        section is read-write.
  141 00000000         ; Total number of variables should not exceed 128. 
  142 00000000         ; No initialization possible in this region. In other wo
                       rds, you should write to a location before you can read 
                       from it (i.e., write to a location using STR before read
                       ing using LDR).
  143 00000000         
  144 00000000         variable1
  145 00000000 00000000        DCD              0x00000000  ;  // unsigned int 
                                                            variable1;
  146 00000004         ; ------- <variable memory (RAM mapped to Data Memory) e
                       nds> 
  147 00000004         
  148 00000004                 END
Command Line: --debug --xref --apcs=interwork --depend=HelloWorld.d -oHelloWorl
d.o -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include --predefine="__EVAL SETA
 1" --list=HelloWorld.lst HelloWorld.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DONE_PRINT_S 000000D0

Symbol: DONE_PRINT_S
   Definitions
      At line 88 in file HelloWorld.s
   Uses
      At line 80 in file HelloWorld.s
Comment: DONE_PRINT_S used once
ECHO_A 00000030

Symbol: ECHO_A
   Definitions
      At line 35 in file HelloWorld.s
   Uses
      At line 39 in file HelloWorld.s
Comment: ECHO_A used once
ECHO_CR 00000060

Symbol: ECHO_CR
   Definitions
      At line 51 in file HelloWorld.s
   Uses
      At line 55 in file HelloWorld.s
Comment: ECHO_CR used once
MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 13 in file HelloWorld.s
   Uses
      None
Comment: MYCODE unused
NEXTCHAR 000000A0

Symbol: NEXTCHAR
   Definitions
      At line 74 in file HelloWorld.s
   Uses
      At line 78 in file HelloWorld.s
      At line 85 in file HelloWorld.s

PRINT_S 00000098

Symbol: PRINT_S
   Definitions
      At line 70 in file HelloWorld.s
   Uses
      At line 64 in file HelloWorld.s
      At line 87 in file HelloWorld.s

WAIT_A 0000001C

Symbol: WAIT_A
   Definitions
      At line 28 in file HelloWorld.s
   Uses
      At line 32 in file HelloWorld.s
      At line 43 in file HelloWorld.s
      At line 65 in file HelloWorld.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


WAIT_CR 00000050

Symbol: WAIT_CR
   Definitions
      At line 45 in file HelloWorld.s
   Uses
      At line 48 in file HelloWorld.s
      At line 60 in file HelloWorld.s

halt 000000D4

Symbol: halt
   Definitions
      At line 91 in file HelloWorld.s
   Uses
      At line 92 in file HelloWorld.s
Comment: halt used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CONSOLE 0000000C

Symbol: CONSOLE
   Definitions
      At line 110 in file HelloWorld.s
   Uses
      At line 24 in file HelloWorld.s
Comment: CONSOLE used once
CONSOLE_IN_valid 00000010

Symbol: CONSOLE_IN_valid
   Definitions
      At line 112 in file HelloWorld.s
   Uses
      At line 23 in file HelloWorld.s
Comment: CONSOLE_IN_valid used once
CONSOLE_OUT_ready 00000014

Symbol: CONSOLE_OUT_ready
   Definitions
      At line 114 in file HelloWorld.s
   Uses
      At line 22 in file HelloWorld.s
Comment: CONSOLE_OUT_ready used once
CONSTANTS 00000000

Symbol: CONSTANTS
   Definitions
      At line 97 in file HelloWorld.s
   Uses
      None
Comment: CONSTANTS unused
DELAY_VAL 00000024

Symbol: DELAY_VAL
   Definitions
      At line 124 in file HelloWorld.s
   Uses
      None
Comment: DELAY_VAL unused
DIPS 00000004

Symbol: DIPS
   Definitions
      At line 106 in file HelloWorld.s
   Uses
      None
Comment: DIPS unused
LEDS 00000000

Symbol: LEDS
   Definitions
      At line 104 in file HelloWorld.s
   Uses
      At line 26 in file HelloWorld.s
Comment: LEDS used once
LSB_MASK 00000020

Symbol: LSB_MASK



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 122 in file HelloWorld.s
   Uses
      At line 21 in file HelloWorld.s
Comment: LSB_MASK used once
PBS 00000008

Symbol: PBS
   Definitions
      At line 108 in file HelloWorld.s
   Uses
      None
Comment: PBS unused
SEVENSEG 00000018

Symbol: SEVENSEG
   Definitions
      At line 116 in file HelloWorld.s
   Uses
      At line 25 in file HelloWorld.s
Comment: SEVENSEG used once
ZERO 0000001C

Symbol: ZERO
   Definitions
      At line 120 in file HelloWorld.s
   Uses
      At line 20 in file HelloWorld.s
Comment: ZERO used once
constant1 0000002C

Symbol: constant1
   Definitions
      At line 128 in file HelloWorld.s
   Uses
      None
Comment: constant1 unused
string1 00000030

Symbol: string1
   Definitions
      At line 130 in file HelloWorld.s
   Uses
      At line 133 in file HelloWorld.s
Comment: string1 used once
stringptr 00000048

Symbol: stringptr
   Definitions
      At line 132 in file HelloWorld.s
   Uses
      At line 62 in file HelloWorld.s
Comment: stringptr used once
variable1_addr 00000028

Symbol: variable1_addr
   Definitions
      At line 126 in file HelloWorld.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      None
Comment: variable1_addr unused
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

VARIABLES 00000000

Symbol: VARIABLES
   Definitions
      At line 138 in file HelloWorld.s
   Uses
      None
Comment: VARIABLES unused
variable1 00000000

Symbol: variable1
   Definitions
      At line 144 in file HelloWorld.s
   Uses
      At line 127 in file HelloWorld.s
Comment: variable1 used once
2 symbols
357 symbols in table
